import React, { ReactNode, useState } from "react";
import { getTheme, setTheme, ThemeType } from "../../../state/theme/theme";
import AnimatedButton from "../animated-buttons/AnimatedButton";
import { classNames } from "../../../utils/tailwind-utils";

interface ThemeToggleProps {
  type?: "iconButton" | "whideButton";
}

const ThemeToggle: React.FC<ThemeToggleProps> = ({ type }) => {
  const [currentTheme, setCurrentTheme] = useState<ThemeType>(getTheme());

  const handleChangeTheme = () => {
    if (currentTheme === "light") {
      setCurrentTheme("dark");
      setTheme("dark");
      document.body.classList.remove("light");
      document.body.classList.add("dark");
    } else {
      setCurrentTheme("light");
      setTheme("light");

      document.body.classList.remove("dark");
      document.body.classList.add("light");
    }
  };

  const darkModeIcon = (
    <svg
      width={type === "iconButton" ? "32" : "24"}
      height={type === "iconButton" ? "32" : "24"}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={classNames(
        "stroke-none",
        type === "iconButton" ? "fill-my-bgContrast" : "fill-my-background",
      )}
    >
      <path d="M12 21C9.5 21 7.375 20.125 5.625 18.375C3.875 16.625 3 14.5 3 12C3 9.5 3.875 7.375 5.625 5.625C7.375 3.875 9.5 3 12 3C12.2333 3 12.4625 3.00833 12.6875 3.025C12.9125 3.04167 13.1333 3.06667 13.35 3.1C12.6667 3.58333 12.1208 4.2125 11.7125 4.9875C11.3042 5.7625 11.1 6.6 11.1 7.5C11.1 9 11.625 10.275 12.675 11.325C13.725 12.375 15 12.9 16.5 12.9C17.4167 12.9 18.2583 12.6958 19.025 12.2875C19.7917 11.8792 20.4167 11.3333 20.9 10.65C20.9333 10.8667 20.9583 11.0875 20.975 11.3125C20.9917 11.5375 21 11.7667 21 12C21 14.5 20.125 16.625 18.375 18.375C16.625 20.125 14.5 21 12 21ZM12 19C13.4667 19 14.7833 18.5958 15.95 17.7875C17.1167 16.9792 17.9667 15.925 18.5 14.625C18.1667 14.7083 17.8333 14.775 17.5 14.825C17.1667 14.875 16.8333 14.9 16.5 14.9C14.45 14.9 12.7042 14.1792 11.2625 12.7375C9.82083 11.2958 9.1 9.55 9.1 7.5C9.1 7.16667 9.125 6.83333 9.175 6.5C9.225 6.16667 9.29167 5.83333 9.375 5.5C8.075 6.03333 7.02083 6.88333 6.2125 8.05C5.40417 9.21667 5 10.5333 5 12C5 13.9333 5.68333 15.5833 7.05 16.95C8.41667 18.3167 10.0667 19 12 19Z" />
    </svg>
  );

  const lightModeIcon = (
    <svg
      width={type === "iconButton" ? "32" : "24"}
      height={type === "iconButton" ? "32" : "24"}
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={classNames(
        "stroke-none",
        type === "iconButton" ? "fill-my-bgContrast" : "fill-my-background",
      )}
    >
      <mask
        x="0"
        y="0"
        width={type === "iconButton" ? "32" : "24"}
        height={type === "iconButton" ? "32" : "24"}
      >
        <path d="M0 0H24V24H0V0Z" />
      </mask>
      <g mask="url(#mask0_363_566)">
        <path d="M12 0C12.2652 0 12.5196 0.105357 12.7071 0.292893C12.8946 0.48043 13 0.734784 13 1V5C13 5.26522 12.8946 5.51957 12.7071 5.70711C12.5196 5.89464 12.2652 6 12 6C11.7348 6 11.4804 5.89464 11.2929 5.70711C11.1054 5.51957 11 5.26522 11 5V1C11 0.734784 11.1054 0.48043 11.2929 0.292893C11.4804 0.105357 11.7348 0 12 0ZM4.929 3.515C4.7404 3.33284 4.4878 3.23205 4.2256 3.23433C3.9634 3.2366 3.71259 3.34177 3.52718 3.52718C3.34177 3.71259 3.2366 3.9634 3.23433 4.2256C3.23205 4.4878 3.33284 4.7404 3.515 4.929L6.343 7.757C6.5316 7.93916 6.7842 8.03995 7.0464 8.03767C7.3086 8.0354 7.55941 7.93023 7.74482 7.74482C7.93023 7.55941 8.0354 7.3086 8.03767 7.0464C8.03995 6.7842 7.93916 6.5316 7.757 6.343L4.929 3.515ZM1 11C0.734784 11 0.48043 11.1054 0.292893 11.2929C0.105357 11.4804 0 11.7348 0 12C0 12.2652 0.105357 12.5196 0.292893 12.7071C0.48043 12.8946 0.734784 13 1 13H5C5.26522 13 5.51957 12.8946 5.70711 12.7071C5.89464 12.5196 6 12.2652 6 12C6 11.7348 5.89464 11.4804 5.70711 11.2929C5.51957 11.1054 5.26522 11 5 11H1ZM18 12C18 11.7348 18.1054 11.4804 18.2929 11.2929C18.4804 11.1054 18.7348 11 19 11H23C23.2652 11 23.5196 11.1054 23.7071 11.2929C23.8946 11.4804 24 11.7348 24 12C24 12.2652 23.8946 12.5196 23.7071 12.7071C23.5196 12.8946 23.2652 13 23 13H19C18.7348 13 18.4804 12.8946 18.2929 12.7071C18.1054 12.5196 18 12.2652 18 12ZM17.657 16.243C17.4684 16.0608 17.2158 15.96 16.9536 15.9623C16.6914 15.9646 16.4406 16.0698 16.2552 16.2552C16.0698 16.4406 15.9646 16.6914 15.9623 16.9536C15.96 17.2158 16.0608 17.4684 16.243 17.657L19.071 20.485C19.1632 20.5805 19.2736 20.6567 19.3956 20.7091C19.5176 20.7615 19.6488 20.7891 19.7816 20.7903C19.9144 20.7914 20.0461 20.7661 20.169 20.7158C20.2919 20.6655 20.4035 20.5913 20.4974 20.4974C20.5913 20.4035 20.6655 20.2919 20.7158 20.169C20.7661 20.0461 20.7914 19.9144 20.7903 19.7816C20.7891 19.6488 20.7615 19.5176 20.7091 19.3956C20.6567 19.2736 20.5805 19.1632 20.485 19.071L17.657 16.243ZM7.757 17.657C7.85251 17.5648 7.92869 17.4544 7.9811 17.3324C8.03351 17.2104 8.0611 17.0792 8.06225 16.9464C8.0634 16.8136 8.0381 16.6819 7.98782 16.559C7.93754 16.4361 7.86329 16.3245 7.76939 16.2306C7.6755 16.1367 7.56385 16.0625 7.44095 16.0122C7.31806 15.9619 7.18638 15.9366 7.0536 15.9377C6.92082 15.9389 6.7896 15.9665 6.6676 16.0189C6.54559 16.0713 6.43525 16.1475 6.343 16.243L3.515 19.07C3.41949 19.1622 3.34331 19.2726 3.2909 19.3946C3.23849 19.5166 3.2109 19.6478 3.20975 19.7806C3.2086 19.9134 3.2339 20.0451 3.28418 20.168C3.33446 20.2908 3.40871 20.4025 3.5026 20.4964C3.5965 20.5903 3.70815 20.6645 3.83105 20.7148C3.95394 20.7651 4.08562 20.7904 4.2184 20.7893C4.35118 20.7881 4.4824 20.7605 4.6044 20.7081C4.72641 20.6557 4.83675 20.5795 4.929 20.484L7.757 17.657ZM20.485 4.929C20.6672 4.7404 20.768 4.4878 20.7657 4.2256C20.7634 3.9634 20.6582 3.71259 20.4728 3.52718C20.2874 3.34177 20.0366 3.2366 19.7744 3.23433C19.5122 3.23205 19.2596 3.33284 19.071 3.515L16.243 6.343C16.1475 6.43525 16.0713 6.54559 16.0189 6.6676C15.9665 6.7896 15.9389 6.92082 15.9377 7.0536C15.9366 7.18638 15.9619 7.31806 16.0122 7.44095C16.0625 7.56385 16.1367 7.6755 16.2306 7.76939C16.3245 7.86329 16.4361 7.93754 16.559 7.98782C16.6819 8.0381 16.8136 8.0634 16.9464 8.06225C17.0792 8.0611 17.2104 8.03351 17.3324 7.9811C17.4544 7.92869 17.5648 7.85251 17.657 7.757L20.485 4.929ZM13 19C13 18.7348 12.8946 18.4804 12.7071 18.2929C12.5196 18.1054 12.2652 18 12 18C11.7348 18 11.4804 18.1054 11.2929 18.2929C11.1054 18.4804 11 18.7348 11 19V23C11 23.2652 11.1054 23.5196 11.2929 23.7071C11.4804 23.8946 11.7348 24 12 24C12.2652 24 12.5196 23.8946 12.7071 23.7071C12.8946 23.5196 13 23.2652 13 23V19ZM12 7C10.6739 7 9.40215 7.52678 8.46447 8.46447C7.52678 9.40215 7 10.6739 7 12C7 13.3261 7.52678 14.5979 8.46447 15.5355C9.40215 16.4732 10.6739 17 12 17C13.3261 17 14.5979 16.4732 15.5355 15.5355C16.4732 14.5979 17 13.3261 17 12C17 10.6739 16.4732 9.40215 15.5355 8.46447C14.5979 7.52678 13.3261 7 12 7Z" />
      </g>
    </svg>
  );

  const className =
    "flex flex-row p-4 rounded-full m-1 items-center-center text-my-background fill-my-background stroke-my-background";
  const iconClassName = "pr-3";
  const maxScale = 1.05;

  return (
    <div onClick={handleChangeTheme}>
      {type === "iconButton" ? (
        <AnimatedButton maxScale={maxScale}>
          <div className="m-2 flex size-8 items-center justify-center rounded-full">
            <div>{currentTheme === "light" ? darkModeIcon : lightModeIcon}</div>
          </div>
        </AnimatedButton>
      ) : (
        <AnimatedButton maxScale={maxScale}>
          <div
            className={classNames(
              className,
              "border-my-border-color border-2 bg-my-bgContrast stroke-primary-contrast text-my-background",
            )}
          >
            <div className={iconClassName}>
              {currentTheme === "light" ? darkModeIcon : lightModeIcon}
            </div>
            <p>
              {currentTheme === "light" ? "Modalità Scura" : "Modalità chiara"}
            </p>
          </div>
        </AnimatedButton>
      )}
    </div>
  );
};

export default ThemeToggle;
